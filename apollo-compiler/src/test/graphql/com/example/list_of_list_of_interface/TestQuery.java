// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.nested_array;

import com.apollographql.apollo.api.Operation;
import com.apollographql.apollo.api.OperationName;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.api.ResponseField;
import com.apollographql.apollo.api.ScalarTypeAdapters;
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer;
import com.apollographql.apollo.api.internal.Optional;
import com.apollographql.apollo.api.internal.QueryDocumentMinifier;
import com.apollographql.apollo.api.internal.ResponseFieldMapper;
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller;
import com.apollographql.apollo.api.internal.ResponseReader;
import com.apollographql.apollo.api.internal.ResponseWriter;
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser;
import com.apollographql.apollo.api.internal.Utils;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class TestQuery implements Query<TestQuery.Data, Optional<TestQuery.Data>, Operation.Variables> {
  public static final String OPERATION_ID = "24f14babcf3086dc3d5a445d1cb5c5de862172a2ee876f8a8e02e77488a1cf08";

  public static final String QUERY_DOCUMENT = QueryDocumentMinifier.minify(
    "query TestQuery {\n"
        + "  description {\n"
        + "    __typename\n"
        + "    ... on TextFilterDescriptionElement {\n"
        + "      type\n"
        + "      displayName\n"
        + "    }\n"
        + "    ... on IconFilterDescriptionElement {\n"
        + "      type\n"
        + "      name\n"
        + "    }\n"
        + "    ... on ImageFilterDescriptionElement {\n"
        + "      type\n"
        + "      image\n"
        + "    }\n"
        + "  }\n"
        + "}"
  );

  public static final OperationName OPERATION_NAME = new OperationName() {
    @Override
    public String name() {
      return "TestQuery";
    }
  };

  private final Operation.Variables variables;

  public TestQuery() {
    this.variables = Operation.EMPTY_VARIABLES;
  }

  @Override
  public String operationId() {
    return OPERATION_ID;
  }

  @Override
  public String queryDocument() {
    return QUERY_DOCUMENT;
  }

  @Override
  public Optional<TestQuery.Data> wrapData(TestQuery.Data data) {
    return Optional.fromNullable(data);
  }

  @Override
  public Operation.Variables variables() {
    return variables;
  }

  @Override
  public ResponseFieldMapper<TestQuery.Data> responseFieldMapper() {
    return new Data.Mapper();
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public OperationName name() {
    return OPERATION_NAME;
  }

  @Override
  @NotNull
  public Response<Optional<TestQuery.Data>> parse(@NotNull final BufferedSource source,
      @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<Optional<TestQuery.Data>> parse(@NotNull final ByteString byteString,
      @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return parse(new Buffer().write(byteString), scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<Optional<TestQuery.Data>> parse(@NotNull final BufferedSource source) throws
      IOException {
    return parse(source, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public Response<Optional<TestQuery.Data>> parse(@NotNull final ByteString byteString) throws
      IOException {
    return parse(byteString, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(@NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, false, true, scalarTypeAdapters);
  }

  @NotNull
  @Override
  public ByteString composeRequestBody() {
    return OperationRequestBodyComposer.compose(this, false, true, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(final boolean autoPersistQueries,
      final boolean withQueryDocument, @NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, autoPersistQueries, withQueryDocument, scalarTypeAdapters);
  }

  public static final class Builder {
    Builder() {
    }

    public TestQuery build() {
      return new TestQuery();
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  public static class Data implements Operation.Data {
    static final ResponseField[] $responseFields = {
      ResponseField.forList("description", "description", null, true, Collections.<ResponseField.Condition>emptyList())
    };

    final Optional<List<Description>> description;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public Data(@Nullable List<Description> description) {
      this.description = Optional.fromNullable(description);
    }

    public Optional<List<Description>> description() {
      return this.description;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeList($responseFields[0], description.isPresent() ? description.get() : null, new ResponseWriter.ListWriter() {
            @Override
            public void write(List items, ResponseWriter.ListItemWriter listItemWriter) {
              for (Object item : items) {
                listItemWriter.writeObject(((Description) item).marshaller());
              }
            }
          });
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "description=" + description
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return this.description.equals(that.description);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= description.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<Data> {
      final Description.Mapper descriptionFieldMapper = new Description.Mapper();

      @Override
      public Data map(ResponseReader reader) {
        final List<Description> description = reader.readList($responseFields[0], new ResponseReader.ListReader<Description>() {
          @Override
          public Description read(ResponseReader.ListItemReader listItemReader) {
            return listItemReader.readObject(new ResponseReader.ObjectReader<Description>() {
              @Override
              public Description read(ResponseReader reader) {
                return descriptionFieldMapper.map(reader);
              }
            });
          }
        });
        return new Data(description);
      }
    }
  }

  public interface Description {
    @NotNull String __typename();

    ResponseFieldMarshaller marshaller();

    default <T> T visit(Visitor<T> visitor) {
      if (this instanceof AsTextFilterDescriptionElement) {
        return visitor.visit((AsTextFilterDescriptionElement) this);
      } else if (this instanceof AsIconFilterDescriptionElement) {
        return visitor.visit((AsIconFilterDescriptionElement) this);
      } else if (this instanceof AsImageFilterDescriptionElement) {
        return visitor.visit((AsImageFilterDescriptionElement) this);
      } else if (this instanceof AsFilterDescriptionElement) {
        return visitor.visit((AsFilterDescriptionElement) this);
      }
      return visitor.visitDefault(this);
    }

    final class Mapper implements ResponseFieldMapper<Description> {
      static final ResponseField[] $responseFields = {
        ResponseField.forFragment("__typename", "__typename", Arrays.<ResponseField.Condition>asList(
          ResponseField.Condition.typeCondition(new String[] {"TextFilterDescriptionElement"})
        )),
        ResponseField.forFragment("__typename", "__typename", Arrays.<ResponseField.Condition>asList(
          ResponseField.Condition.typeCondition(new String[] {"IconFilterDescriptionElement"})
        )),
        ResponseField.forFragment("__typename", "__typename", Arrays.<ResponseField.Condition>asList(
          ResponseField.Condition.typeCondition(new String[] {"ImageFilterDescriptionElement"})
        ))
      };

      final AsTextFilterDescriptionElement.Mapper asTextFilterDescriptionElementFieldMapper = new AsTextFilterDescriptionElement.Mapper();

      final AsIconFilterDescriptionElement.Mapper asIconFilterDescriptionElementFieldMapper = new AsIconFilterDescriptionElement.Mapper();

      final AsImageFilterDescriptionElement.Mapper asImageFilterDescriptionElementFieldMapper = new AsImageFilterDescriptionElement.Mapper();

      final AsFilterDescriptionElement.Mapper asFilterDescriptionElementFieldMapper = new AsFilterDescriptionElement.Mapper();

      @Override
      public Description map(ResponseReader reader) {
        final AsTextFilterDescriptionElement asTextFilterDescriptionElement = reader.readFragment($responseFields[0], new ResponseReader.ObjectReader<AsTextFilterDescriptionElement>() {
          @Override
          public AsTextFilterDescriptionElement read(ResponseReader reader) {
            return asTextFilterDescriptionElementFieldMapper.map(reader);
          }
        });
        if (asTextFilterDescriptionElement != null) {
          return asTextFilterDescriptionElement;
        }
        final AsIconFilterDescriptionElement asIconFilterDescriptionElement = reader.readFragment($responseFields[1], new ResponseReader.ObjectReader<AsIconFilterDescriptionElement>() {
          @Override
          public AsIconFilterDescriptionElement read(ResponseReader reader) {
            return asIconFilterDescriptionElementFieldMapper.map(reader);
          }
        });
        if (asIconFilterDescriptionElement != null) {
          return asIconFilterDescriptionElement;
        }
        final AsImageFilterDescriptionElement asImageFilterDescriptionElement = reader.readFragment($responseFields[2], new ResponseReader.ObjectReader<AsImageFilterDescriptionElement>() {
          @Override
          public AsImageFilterDescriptionElement read(ResponseReader reader) {
            return asImageFilterDescriptionElementFieldMapper.map(reader);
          }
        });
        if (asImageFilterDescriptionElement != null) {
          return asImageFilterDescriptionElement;
        }
        return asFilterDescriptionElementFieldMapper.map(reader);
      }
    }

    interface Visitor<T> {
      T visitDefault(@NotNull Description description);

      T visit(@NotNull AsTextFilterDescriptionElement asTextFilterDescriptionElement);

      T visit(@NotNull AsIconFilterDescriptionElement asIconFilterDescriptionElement);

      T visit(@NotNull AsImageFilterDescriptionElement asImageFilterDescriptionElement);

      T visit(@NotNull AsFilterDescriptionElement asFilterDescriptionElement);
    }
  }

  public static class AsTextFilterDescriptionElement implements Description {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("type", "type", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("displayName", "displayName", null, false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @NotNull String type;

    final @NotNull String displayName;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public AsTextFilterDescriptionElement(@NotNull String __typename, @NotNull String type,
        @NotNull String displayName) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this.type = Utils.checkNotNull(type, "type == null");
      this.displayName = Utils.checkNotNull(displayName, "displayName == null");
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    public @NotNull String type() {
      return this.type;
    }

    public @NotNull String displayName() {
      return this.displayName;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeString($responseFields[1], type);
          writer.writeString($responseFields[2], displayName);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "AsTextFilterDescriptionElement{"
          + "__typename=" + __typename + ", "
          + "type=" + type + ", "
          + "displayName=" + displayName
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof AsTextFilterDescriptionElement) {
        AsTextFilterDescriptionElement that = (AsTextFilterDescriptionElement) o;
        return this.__typename.equals(that.__typename)
         && this.type.equals(that.type)
         && this.displayName.equals(that.displayName);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= type.hashCode();
        h *= 1000003;
        h ^= displayName.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<AsTextFilterDescriptionElement> {
      @Override
      public AsTextFilterDescriptionElement map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final String type = reader.readString($responseFields[1]);
        final String displayName = reader.readString($responseFields[2]);
        return new AsTextFilterDescriptionElement(__typename, type, displayName);
      }
    }
  }

  public static class AsIconFilterDescriptionElement implements Description {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("type", "type", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("name", "name", null, false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @NotNull String type;

    final @NotNull String name;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public AsIconFilterDescriptionElement(@NotNull String __typename, @NotNull String type,
        @NotNull String name) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this.type = Utils.checkNotNull(type, "type == null");
      this.name = Utils.checkNotNull(name, "name == null");
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    public @NotNull String type() {
      return this.type;
    }

    public @NotNull String name() {
      return this.name;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeString($responseFields[1], type);
          writer.writeString($responseFields[2], name);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "AsIconFilterDescriptionElement{"
          + "__typename=" + __typename + ", "
          + "type=" + type + ", "
          + "name=" + name
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof AsIconFilterDescriptionElement) {
        AsIconFilterDescriptionElement that = (AsIconFilterDescriptionElement) o;
        return this.__typename.equals(that.__typename)
         && this.type.equals(that.type)
         && this.name.equals(that.name);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= type.hashCode();
        h *= 1000003;
        h ^= name.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<AsIconFilterDescriptionElement> {
      @Override
      public AsIconFilterDescriptionElement map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final String type = reader.readString($responseFields[1]);
        final String name = reader.readString($responseFields[2]);
        return new AsIconFilterDescriptionElement(__typename, type, name);
      }
    }
  }

  public static class AsImageFilterDescriptionElement implements Description {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("type", "type", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("image", "image", null, false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @NotNull String type;

    final @NotNull String image;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public AsImageFilterDescriptionElement(@NotNull String __typename, @NotNull String type,
        @NotNull String image) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this.type = Utils.checkNotNull(type, "type == null");
      this.image = Utils.checkNotNull(image, "image == null");
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    public @NotNull String type() {
      return this.type;
    }

    public @NotNull String image() {
      return this.image;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeString($responseFields[1], type);
          writer.writeString($responseFields[2], image);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "AsImageFilterDescriptionElement{"
          + "__typename=" + __typename + ", "
          + "type=" + type + ", "
          + "image=" + image
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof AsImageFilterDescriptionElement) {
        AsImageFilterDescriptionElement that = (AsImageFilterDescriptionElement) o;
        return this.__typename.equals(that.__typename)
         && this.type.equals(that.type)
         && this.image.equals(that.image);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= type.hashCode();
        h *= 1000003;
        h ^= image.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<AsImageFilterDescriptionElement> {
      @Override
      public AsImageFilterDescriptionElement map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final String type = reader.readString($responseFields[1]);
        final String image = reader.readString($responseFields[2]);
        return new AsImageFilterDescriptionElement(__typename, type, image);
      }
    }
  }

  public static class AsFilterDescriptionElement implements Description {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public AsFilterDescriptionElement(@NotNull String __typename) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "AsFilterDescriptionElement{"
          + "__typename=" + __typename
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof AsFilterDescriptionElement) {
        AsFilterDescriptionElement that = (AsFilterDescriptionElement) o;
        return this.__typename.equals(that.__typename);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<AsFilterDescriptionElement> {
      @Override
      public AsFilterDescriptionElement map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        return new AsFilterDescriptionElement(__typename);
      }
    }
  }
}
